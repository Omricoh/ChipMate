import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { ApiService } from '../../../services/api.service';

@Component({
  selector: 'app-create-game',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  template: `
    <div class="container mt-5">
      <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
          <div class="card game-card">
            <div class="card-header text-center">
              <h4 class="mb-0">
                <i class="bi bi-plus-circle me-2"></i>
                Create New Game
              </h4>
            </div>
            <div class="card-body">
              <form [formGroup]="createGameForm" (ngSubmit)="onSubmit()">
                <div class="mb-4">
                  <label for="hostName" class="form-label">Host Name</label>
                  <input
                    type="text"
                    class="form-control"
                    id="hostName"
                    formControlName="hostName"
                    placeholder="Enter your name as the host"
                    [class.is-invalid]="createGameForm.get('hostName')?.invalid && createGameForm.get('hostName')?.touched"
                  >
                  <div class="invalid-feedback" *ngIf="createGameForm.get('hostName')?.invalid && createGameForm.get('hostName')?.touched">
                    Host name is required (minimum 2 characters)
                  </div>
                </div>

                <div class="alert alert-info">
                  <i class="bi bi-info-circle me-2"></i>
                  <strong>As the host, you can:</strong>
                  <ul class="mb-0 mt-2">
                    <li>Approve buy-ins and cashouts</li>
                    <li>View all player transactions</li>
                    <li>End the game when complete</li>
                    <li>Generate QR codes for easy joining</li>
                  </ul>
                </div>

                <div class="d-grid">
                  <button
                    type="submit"
                    class="btn btn-success btn-lg"
                    [disabled]="createGameForm.invalid || isLoading"
                  >
                    <span *ngIf="isLoading" class="loading-spinner me-2"></span>
                    <i *ngIf="!isLoading" class="bi bi-plus-circle me-2"></i>
                    {{ isLoading ? 'Creating Game...' : 'Create Game' }}
                  </button>
                </div>
              </form>

              <div class="alert alert-danger mt-3" *ngIf="errorMessage">
                <i class="bi bi-exclamation-triangle me-2"></i>
                {{ errorMessage }}
              </div>

              <div class="mt-4 text-center">
                <a routerLink="/home" class="btn btn-outline-secondary">
                  <i class="bi bi-arrow-left me-2"></i>
                  Back to Home
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `,
  styles: []
})
export class CreateGameComponent {
  createGameForm: FormGroup;
  isLoading = false;
  errorMessage = '';

  constructor(
    private formBuilder: FormBuilder,
    private apiService: ApiService,
    private router: Router
  ) {
    this.createGameForm = this.formBuilder.group({
      hostName: ['', [Validators.required, Validators.minLength(2)]]
    });

    // Pre-fill with current user's name if available
    const currentUser = this.apiService.getCurrentUser();
    if (currentUser) {
      this.createGameForm.patchValue({
        hostName: currentUser.name
      });
    }
  }

  onSubmit(): void {
    if (this.createGameForm.valid) {
      this.isLoading = true;
      this.errorMessage = '';

      const hostName = this.createGameForm.value.hostName.trim();

      this.apiService.createGame(hostName).subscribe({
        next: (response) => {
          this.isLoading = false;

          // Update current user's game ID and user ID if needed
          const currentUser = this.apiService.getCurrentUser();
          if (currentUser) {
            currentUser.current_game_id = response.game_id;
            currentUser.is_host = true;
            // Update user ID if it was generated by the backend
            if (response.host_user_id && currentUser.id !== response.host_user_id) {
              currentUser.id = response.host_user_id;
            }
            this.apiService.setCurrentUser(currentUser);
          }

          // Navigate to the game
          this.router.navigate(['/game', response.game_id]);
        },
        error: (error) => {
          this.isLoading = false;
          this.errorMessage = error.error?.error || error.error?.message || 'Failed to create game. Please try again.';
        }
      });
    }
  }
}